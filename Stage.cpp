#include "Stage.h"


const int IMAGE_SIZE = { 32 };

//マップのチップ数
const int MAP_WIDTH{ 32 };
const int MAP_HEIGHT{ 32 };

//横には0から15
//画像のチップ数
const int MAP_CHIP_WIDTH = 16;
const int MAP_CHIP_HEIGHT = 12;

const int myMap[MAP_HEIGHT][MAP_WIDTH] = {
{17,17,17,17,17,17,17,17,17,17,17,17,17,17,80,80,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17},
{17,17,17,17,17,17,17,17,17,17,17,17,17,17,80,80,17,17,17,17,120,121,121,17,17,17,17,17,17,17,17,17},
{17,17,17,17,120,121,17,17,17,17,17,17,17,17,80,80,17,17,17,17,136,137,137,17,17,17,17,120,121,17,17,17},
{17,17,17,17,120,121,17,17,17,17,17,17,17,17,80,80,17,17,17,17,17,17,17,17,17,17,17,136,137,17,17,17},
{17,17,17,17,136,137,17,17,17,17,17,17,17,17,80,80,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17},
{17,17,17,17,17,17,17,17,17,17,17,17,17,17,80,80,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17},
{17,17,17,17,17,17,17,17,17,17,17,17,17,17,80,80,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17},
{17,17,17,17,17,17,17,17,17,17,17,17,17,17,80,80,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17},
{101,101,101,101,101,101,101,101,101,101,101,101,101,101,80,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101},
{101,101,101,101,101,101,101,101,101,101,101,101,101,101,80,80,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101},
{17,17,17,17,17,17,17,17,17,17,17,17,17,17,80,80,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17},
{17,17,17,17,17,17,17,17,17,17,17,17,17,17,80,80,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17},
{17,17,17,17,17,17,17,17,17,17,17,17,17,17,80,80,17,17,17,17,120,121,17,17,17,120,121,17,17,17,17,17},
{17,17,17,17,17,17,17,17,17,17,17,17,17,17,80,80,17,17,17,17,136,137,17,17,17,136,137,17,17,17,17,17},
{17,17,17,17,17,17,17,120,121,17,17,17,17,17,80,80,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17},
{17,17,120,120,121,17,17,136,137,17,17,17,17,17,80,80,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17},
{17,17,136,136,137,17,17,17,17,17,17,17,17,17,80,80,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17},
{17,17,17,17,17,17,17,17,17,17,17,17,17,17,80,80,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17},
{17,17,17,17,17,17,17,17,17,17,17,17,17,17,80,80,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17},
{17,17,17,17,17,17,17,17,17,17,17,17,17,17,80,80,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17}
};

Stage::Stage():hImage(-1),bgHandle(nullptr)
{
	
	bgHandleVec_.resize(MAP_CHIP_WIDTH * MAP_CHIP_HEIGHT,-1);
	bgHandleVec_ = std::vector<int>(MAP_CHIP_WIDTH * MAP_CHIP_HEIGHT, -1);
	//vectorの中の人、データにアクセスする
	LoadDivGraph("bg.png",MAP_CHIP_WIDTH * MAP_CHIP_HEIGHT, MAP_CHIP_WIDTH, MAP_CHIP_HEIGHT, IMAGE_SIZE, IMAGE_SIZE,
		bgHandleVec_.data());
	hImage = LoadGraph("bg.png", 0);

	mapChip_ = new MapChip();
}

Stage::~Stage()
{
	for (int i = 0;i < MAP_CHIP_WIDTH * MAP_CHIP_HEIGHT;i++)
	{
		/*if (bgHandleVec_[i] != -1)
		{
			DeleteGraph(bgHandle[i]);
			bgHandleVec_[i] = -1;
		}*/
	}
	//delete[] bgHandle;
}

void Stage::Update()
{
}

void Stage::Draw()
{
	for (int i = 0;i < MAP_WIDTH;i++)
	{
		for (int j = 0;j < MAP_HEIGHT;j++)
		{
			int chi = myMap[i][j];

			if (bgHandleVec_[chi] == -1)
			{
				continue;
			}
			DrawGraph(j * IMAGE_SIZE, i * IMAGE_SIZE, bgHandleVec_[chi], TRUE);
		}
	}
}
